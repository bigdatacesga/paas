from __future__ import print_function
import os
import sys
import StringIO
import json
from fabric.api import *
from fabric.colors import red, green, yellow
from fabric.contrib.files import exists
# FIXME: Installing configuration-registry with pip and importing registry directly does not work
#  inside the fabfile. Temporarily it is copied manually in the utils directory
import registry
#from utils import registry

if os.environ.get('INSTANCE'):
    INSTANCE = os.environ.get('INSTANCE')
else:
    #eprint(red('An instance endpoint has to be provided using the INSTANCE environment variable'))
    print(red('An instance endpoint has to be provided using the INSTANCE environment variable'))
    sys.exit(2)

if os.environ.get('REGISTRY'):
    REGISTRY = os.environ.get('REGISTRY')
else:
    REGISTRY = 'http://consul.service.int.cesga.es:8500/v1/kv'

# Retrieve info from the registry
registry.connect(REGISTRY)
cluster = registry.Cluster(INSTANCE)
nodes = cluster.nodes
services = cluster.services

# Expose the relevant information
NODES = {node.name: node for node in nodes}
SERVICES = {service.name: service for service in services}
OP = os.environ.get('OP')

print("OS is: " + OP)

#### FABRIC VARIABLES ####
env.user = 'root'
SERVICE = 'docker-slurm'
DOMAIN = 'lan.cesga.es'
TAG = '20160310-snapshot'
##########################


confFILE = """
#
# Example slurm.conf file. Please run configurator.html
# (in doc/html) to build a configuration file customized
# for your environment.
#
#
# slurm.conf file generated by configurator.html.
#
# See the slurm.conf man page for more information.
#
#ControlAddr=
#BackupController=
#BackupAddr=
#
SlurmUser=slurm
#SlurmdUser=root
SlurmctldPort=6817
SlurmdPort=6818
AuthType=auth/munge
#JobCredentialPrivateKey=
#JobCredentialPublicCertificate=
StateSaveLocation=/tmp/slurmState
SlurmdSpoolDir=/tmp/slurmd
SwitchType=switch/none
MpiDefault=none
SlurmctldPidFile=/var/run/slurmctld.pid
SlurmdPidFile=/var/run/slurmd.pid
ProctrackType=proctrack/pgid
#PluginDir=
CacheGroups=0
#FirstJobId=
ReturnToService=0
#MaxJobCount=
#PlugStackConfig=
#PropagatePrioProcess=
#PropagateResourceLimits=
#PropagateResourceLimitsExcept=
#Prolog=
#Epilog=
#SrunProlog=
#SrunEpilog=
#TaskProlog=
#TaskEpilog=
#TaskPlugin=
#TrackWCKey=no
#TreeWidth=50
#TmpFS=
#UsePAM=
#
# TIMERS
SlurmctldTimeout=300
SlurmdTimeout=300
InactiveLimit=0
MinJobAge=300
KillWait=30
Waittime=0
#
# SCHEDULING
SchedulerType=sched/backfill
#SchedulerAuth=
#SchedulerPort=
#SchedulerRootFilter=
SelectType=select/linear
FastSchedule=1
#PriorityType=priority/multifactor
#PriorityDecayHalfLife=14-0
#PriorityUsageResetPeriod=14-0
#PriorityWeightFairshare=100000
#PriorityWeightAge=1000
#PriorityWeightPartition=10000
#PriorityWeightJobSize=1000
#PriorityMaxAge=1-0
#
# LOGGING
SlurmctldDebug=4
SlurmctldLogFile=/var/log/slurm/slurmctl.log
SlurmdDebug=4
SlurmdLogFile=/var/log/slurm/slurmd.log
JobCompType=jobcomp/none
#JobCompLoc=
#
# ACCOUNTING
#JobAcctGatherType=jobacct_gather/linux
#JobAcctGatherFrequency=30
#
#AccountingStorageType=accounting_storage/slurmdbd
#AccountingStorageHost=
#AccountingStorageLoc=
#AccountingStoragePass=
#AccountingStorageUser=
#
# COMPUTE NODES
"""

hostsFILE="""
127.0.0.1	localhost
::1	localhost ip6-localhost ip6-loopback
fe00::0	ip6-localnet
ff00::0	ip6-mcastprefix
ff02::1	ip6-allnodes
ff02::2	ip6-allrouters
"""


def configure_host(hosts):
    """ Dump the hosts info file in the nodes """
    run("echo " + '"' + hosts + '"' + " > /etc/hosts")


def generate_conf_file(nodes_names):
    global confFILE
    """ Fill the Slurm configuration file """
    #Write clustername
    clustername = "TestClusterSlurm"
    confFILE += "ClusterName=" + clustername + "\n"

    # Write master
    master="master_jenes_slurm"
    confFILE += "ControlMachine=" + master + "\n"

    # Write slaves
    for node in nodes_names:
        cpus = 2
        confFILE += "NodeName=" + node + ' ' + \
                    "Procs=" + str(cpus) + ' ' + \
                    "Sockets=1 CoresPerSocket=" + str(cpus) + ' ' + \
                    "ThreadsPerCore=1 State=UNKNOWN" + '\n'

    confFILE += "PartitionName=main" + " "
    nodesStr = "Nodes="
    for node in nodes_names:
        nodesStr += + node + ','
    #Remove last comma
    nodesStr = nodesStr[0:len(nodesStr)-1]
    nodesStr = nodesStr + ' ' + 'Default=YES MaxTime=INFINITE State=UP'
    confFILE += nodesStr

    return confFILE

def configure_slurm(confFile):
    with open("confSlurm.tmp", "wb") as f:
        f.write(confFile)

    with cd('/etc'):
        put("confSlurm.tmp", "./slurm.conf")


def start_slurm_service():
    run("service slurm start")


def stop_slurm_service():
    run("service slurm stop")


def configure_munge():
    random_number = 100
    run("echo -n \"a random number {}\" | sha512sum | cut -d' ' -f1 >/etc/munge/munge.key".format(random_number))


def start_munge_service():
    run("service munge start")


def stop_munge_service():
    run("service munge stop")


def remove_logs_from_nodes():
    run("rm -f /var/log/munge/munged.log")
    run("rm -f /var/log/slurm/slurm*.log")


def start():
    pass


def stop():
    pass


def status():
    pass


def restart():
    pass


def start_slurm(self, service, user_name, instance, cpus, multiNodeDeployer):
    dicc = multiNodeDeployer.info(service, user_name, instance)
    dicc['s_cpus'] = cpus
    nodes_names = dicc['s_instances_names'];
    nodes_ips=[]
    for node in nodes_names:
        hosts = hosts + '\n' + dicc['nodes'][node]['ip']['private'] + ' ' + node
        nodes_ips = nodes_ips + [dicc['nodes'][node]['ip']['private']]

    execute(configure_host, hosts, hosts=nodes_ips)
    execute(configure_munge, hosts=nodes_ips)
    execute(start_munge_service, hosts=nodes_ips)
    execute(configure_slurm(generate_conf_file(__)))
    execute(configure_slurm, hosts=nodes_ips)
    execute(start_slurm_service, hosts=nodes_ips)


def stop_slurm(self):
    nodes_ips = get_nodes_info();
    execute(stop_munge, hosts=nodes_ips)
    execute(stop_slurm, hosts=nodes_ips)


def remove_logs(self):
    nodes_ips = get_nodes_info();
    execute(remove_logs_from_nodes, hosts=nodes_ips)

if __name__ == "__main__":
    if OP is "start":
        start()
    elif OP is "stop":
        stop()
    elif OP is "status":
        status()
    elif OP is "restart":
        restart()
    else:
        print("Error")
